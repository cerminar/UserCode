a short documentation for the different programs I used for my ZLuminosity Study

***** in test-folder ******

------ addLumiInfoToTPTrees.r
- needed for TagAndProbe Trees, that we have the lumi information
- produce input files in this way:
	python buildinputlist.py -s local -n TPV0_SingleMu_Run2012A-PromptReco-v1_sorted.h /data1/ZLumiStudy/TagProbe/SingleMu_Run2012A-PromptReco-v1/

------ selectRunPeriod.py ------
- sorts the file which is needed for addLumiInofToTPTrees.r in the way that you have a new txt-file which is used in the TagAndProbe programm (for expample: fitTrigger_byLumi.py)

------ sortTree.r ------
- looks for the files which should be used and sort them
- from biggest runnumber to the lowest

------ testLumiReader.r -------
- test the macros/LumiFileReaderByBX.cc
- looks for a special run and create the absolute and the relative difference for the total Lumi (delivered or recorded)
	compared to the sum over all BX

------ testZPeakFit.c -------
- test the macros/ZPeakFit.cc
- load some data and fit the mass peak




***** in test/macros-folder ******

------ calculateCutflowRatio.py -----
- use as input the output files from the ZlumiTreeReader
- select the cutflow tables (from selected periods)
- normed the table (divide all bins with the binContent of the ZMass cut)
- plot the ratio (of period A and B)

------ HistoZ.h ------
- produces some histograms in the Z mass region (used in ZlumiTreeReader.C)

------ LumiFileReaderByBX.cc ------
- read the csvt-file and the filling scheme for a special runnumber
- convert both into a root-file (so it is possible to work faster with the root-file)

- give the different lumis for RunLumiIndex (or RunLumiBXIndex)
- plot a histogramm with the delivered luminosity (weight with recorded luminosity)

------ makeJsonFile.py ------
- use the json file and split this file into one json file for each run
(otherwise LumiCalc does not know the information for the good lumisections)

------ read_allRuns.py ------
- a short script which looks for the runnumbers from the output of LumiCalc (using with the complete json file and "overview")

------ RunLumiIndex.cc -------
- an Index for a special runnumber and a special lumisection

------ RunLumiBXIndex.cc -------
- an index for a special runnumber, lumisection and bx

------ runLumiCalc.py ------
- it runs LumiCalc for the selected runs to get the csvt-files

------ runTreeReader.C ------
- for one, some selected or all runs (possibility to choose between Run2012A and Run2012B)
- all data are in a TChain
- runs the ZlumiTreeReader.C for the analysis

------ save_allRuns.py -----
- save all RunNumber from the output of lumiCalc in one file

------ saveHistograms.py -----
- a script which plot all histograms from the ZlumiTreeReader in one pdf (and in own folder the pngs)
- plot with some fits, the green band...

------ ZlumiTreeReader.C -----
- my analysis macro
	- select the Zs with the different cuts
	- use the LumiFileReaderByBX to get the luminosity
	- load the efficiency files
- calculate the effective cross-section

------ ZPeakFit.C ------
- a macro which fits the ZPeak with three different fits (with RooFit)




***** in test/TagAndProbe-folder ******

- important input files:
	Run2012B.txt
	Run2012A.txt
	test/TagAndProbe/plots_Eff/Run2012_A.root
	test/TagAndProbe/plots_Eff/Run2012_B.root

----- fitTrigger_byLumi.py -----
- calculate Trigger, MuonID and cut efficiency
- possible option: calculate the needed eff or calculate the eff in steps
- need to say which RunPeriod should be used (for B it is important to split the file)

----- loadFitResults.py -----
- load the fitResults for every efficiency calculation and plot the efficiency distribution for every selection

----- saveSteps.py -----
- load the efficiency from one file and plot them together in one canvas
- is needed for the analysis which special cut (from MuonID or the normal cuts) would change the eff the most
- (for this use "inSteps" in the eff-program)



